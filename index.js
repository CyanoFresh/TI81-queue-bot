const Telegraf = require('telegraf');
const commandParts = require('telegraf-command-parts');

if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

const config = require('./config');
const { nameStickerMiddleware, authMiddleware, ignoreMiddleware } = require('./middlewares');
const { loadQueues, saveQueues, stringifyUserList, shuffleArray } = require('./functions');

const queues = loadQueues();

const app = new Telegraf(config.token);

app.use(commandParts());
app.use(nameStickerMiddleware);

app.catch(err => console.error('Error caught:', err));

app.help(ignoreMiddleware, ctx => ctx.reply(`/q - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –ø–∏–¥–æ—Ä–æ–≤
/q {name} - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å –ø–∏–¥–æ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ {name}
/new {name} - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–∏–¥–æ—Ä–æ–≤ —Å –∏–º–µ–Ω–µ–º {name}
/del {name} - –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–∏–¥–æ—Ä–æ–≤ —Å –∏–º–µ–Ω–µ–º {name}
/done {name} –§–ê–ú–ò–õ–ò–Ø - –û—Ç–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏ {name} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
/undone {name} –§–ê–ú–ò–õ–ò–Ø - –û—Ç–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏ {name} –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
/users - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–∏–¥–æ—Ä–æ–≤`));

app.command('q', ignoreMiddleware, ctx => {
  const name = ctx.contextState.command.splitArgs[0];

  if (name && queues[name]) {
    return ctx.reply(`–û—á–µ—Ä–µ–¥—å '${name}':\n${stringifyUserList(queues[name])}`);
  }

  const queuesList = Object.keys(queues).reduce((result, queue) => result + `\n- ${queue}`, '');

  return ctx.reply(`–û—á–µ—Ä–µ–¥–∏:\n${queuesList}\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å:\n/q –ù–ê–ó–í–ê–ù–ò–ï`);
});

app.command('new', authMiddleware, async ctx => {
  const name = ctx.contextState.command.splitArgs[0];

  if (!name) {
    return ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–±–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã');
  }

  const shuffledUsers = shuffleArray(config.users);

  queues[name] = shuffledUsers;
  await saveQueues(queues);
  await ctx.reply(`–û—á–µ—Ä–µ–¥—å —Å–æ–∑–¥–∞–Ω–∞ —Å –∏–º–µ–Ω–µ–º '${name}'\n${stringifyUserList(shuffledUsers)}`);
});

app.command('del', authMiddleware, async ctx => {
  const name = ctx.contextState.command.splitArgs[0];

  if (!name) {
    return ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–±–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã');
  }

  delete queues[name];
  await saveQueues(queues);
  await ctx.reply(`–û—á–µ—Ä–µ–¥—å —Å –∏–º–µ–Ω–µ–º '${name}' —É–¥–∞–ª–µ–Ω–∞`);
});

app.command('done', async ctx => {
  const queueName = ctx.contextState.command.splitArgs[0];
  const userName = ctx.contextState.command.splitArgs[1];

  if (!queueName || !userName) {
    return ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/done {–∏–º—è –æ—á–µ—Ä–µ–¥–∏} {—Ñ–∞–º–∏–ª–∏—è}');
  }

  if (!queues[queueName]) {
    return ctx.reply(`–û—á–µ—Ä–µ–¥—å —Å –∏–º–µ–Ω–µ–º '${queueName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }

  for (let i = 0; i < queues[queueName].length; i++) {
    const currentUser = queues[queueName][i];

    if (currentUser.toLowerCase().includes(userName.toLowerCase())) {
      queues[queueName][i] = currentUser + '  ‚Äçüåà';

      await saveQueues(queues);

      return ctx.reply(`–û—Ç–º–µ—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${currentUser}' –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '${queueName}'`);
    }
  }

  return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${userName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
});

app.command('undone', async ctx => {
  const queueName = ctx.contextState.command.splitArgs[0];
  const userName = ctx.contextState.command.splitArgs[1];

  if (!queueName || !userName) {
    return ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/done {–∏–º—è –æ—á–µ—Ä–µ–¥–∏} {—Ñ–∞–º–∏–ª–∏—è}');
  }

  if (!queues[queueName]) {
    return ctx.reply(`–û—á–µ—Ä–µ–¥—å —Å –∏–º–µ–Ω–µ–º '${queueName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }

  for (let i = 0; i < queues[queueName].length; i++) {
    let currentUser = queues[queueName][i];

    if (currentUser.toLowerCase().includes(userName.toLowerCase())) {
      queues[queueName][i] = currentUser.slice(0, currentUser.length - 3);

      await saveQueues(queues);

      return ctx.reply(`–û—Ç–º–µ—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${queues[queueName][i]}' –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '${queueName}'`);
    }
  }

  return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${userName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
});

app.command('users', ignoreMiddleware, ctx => ctx.reply(`–í—Å–µ –ø–∏–¥–æ—Ä—ã:\n${stringifyUserList(config.users)}`));

let params;

if (Boolean(config.webhook.domain)) {
  params = {
    webhook: config.webhook,
  };
}

app.launch(params).then(() => console.log('Server started'));
