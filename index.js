const Telegraf = require('telegraf');
const commandParts = require('telegraf-command-parts');
const Extra = require('telegraf/extra');
const Markup = require('telegraf/markup');

if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

const config = require('./config');
const { nameStickerMiddleware, authMiddleware, ignoreMiddleware } = require('./middlewares');
const { loadQueues, saveQueues, stringifyUserList, shuffleArray } = require('./functions');

const queues = loadQueues();

const app = new Telegraf(config.token);

app.use(commandParts());
app.use(nameStickerMiddleware);

app.catch(err => console.error('Error caught:', err));

app.help(ignoreMiddleware, ctx => ctx.reply(`/q - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –ø–∏–¥–æ—Ä–æ–≤
/new {name} - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–∏–¥–æ—Ä–æ–≤ —Å –∏–º–µ–Ω–µ–º {name}
/del {name} - –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–∏–¥–æ—Ä–æ–≤ —Å –∏–º–µ–Ω–µ–º {name}
/done {name} –§–ê–ú–ò–õ–ò–Ø - –û—Ç–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏ {name} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
/undone {name} –§–ê–ú–ò–õ–ò–Ø - –û—Ç–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏ {name} –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
/users - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–∏–¥–æ—Ä–æ–≤`));

const renderQueue = name => queues[name] ? `–û—á–µ—Ä–µ–¥—å *${name}*\n${stringifyUserList(queues[name])}` : `–û—á–µ—Ä–µ–¥—å '${name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;

/**
 * @returns {CallbackButton[]}
 */
const getButtons = () => Object.keys(queues).map(queue => Markup.callbackButton(queue, `q_${queue}`));

app.command('q', ctx => ctx.reply(
  '–í—ã–±–µ—Ä–∏ –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–ø–∏—Å–∫–∞:',
  Markup.inlineKeyboard(getButtons(), { columns: config.buttonsInRow }).extra(),
));

app.action(/q_(\w+)/, async ctx => {
  const name = ctx.match[1];
  await ctx.answerCbQuery();
  await ctx.editMessageText(renderQueue(name), Extra.markdown());
});

app.command('new', authMiddleware, async ctx => {
  const name = ctx.contextState.command.splitArgs[0];

  if (!name) {
    return ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–±–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã');
  }

  queues[name] = shuffleArray(config.users);

  await saveQueues(queues);
  await ctx.replyWithMarkdown(renderQueue(name));
});

app.command('del', authMiddleware, async ctx => {
  const name = ctx.contextState.command.splitArgs[0];

  if (!name) {
    return ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–±–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã');
  }

  delete queues[name];

  await saveQueues(queues);
  await ctx.replyWithMarkdown(`–û—á–µ—Ä–µ–¥—å *${name}* —É–¥–∞–ª–µ–Ω–∞`);
});

app.command('done', async ctx => {
  const queueName = ctx.contextState.command.splitArgs[0];
  const userName = ctx.contextState.command.splitArgs[1];

  if (!queueName || !userName) {
    return ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/done {–æ—á–µ—Ä–¥—å} {—Ñ–∞–º–∏–ª–∏—è}');
  }

  if (!queues[queueName]) {
    return ctx.reply(`–û—á–µ—Ä–µ–¥—å —Å –∏–º–µ–Ω–µ–º '${queueName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }

  for (let i = 0; i < queues[queueName].length; i++) {
    const currentUser = queues[queueName][i];

    if (currentUser.toLowerCase().includes(userName.toLowerCase())) {
      queues[queueName][i] = currentUser + '  ‚Äçüåà';

      await saveQueues(queues);

      return ctx.replyWithMarkdown(`–û—Ç–º–µ—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${currentUser}* –∏–∑ –æ—á–µ—Ä–µ–¥–∏ *${queueName}*`);
    }
  }

  return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${userName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
});

app.command('undone', async ctx => {
  const queueName = ctx.contextState.command.splitArgs[0];
  const userName = ctx.contextState.command.splitArgs[1];

  if (!queueName || !userName) {
    return ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/undone {–æ—á–µ—Ä–µ–¥—å} {—Ñ–∞–º–∏–ª–∏—è}');
  }

  if (!queues[queueName]) {
    return ctx.reply(`–û—á–µ—Ä–µ–¥—å —Å –∏–º–µ–Ω–µ–º '${queueName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }

  for (let i = 0; i < queues[queueName].length; i++) {
    let currentUser = queues[queueName][i];

    if (currentUser.toLowerCase().includes(userName.toLowerCase())) {
      queues[queueName][i] = currentUser.slice(0, currentUser.length - 3);

      await saveQueues(queues);

      return ctx.replyWithMarkdown(`–û—Ç–º–µ—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${queues[queueName][i]}* –∏–∑ –æ—á–µ—Ä–µ–¥–∏ *${queueName}*`);
    }
  }

  return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${userName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
});

app.command('users', ignoreMiddleware, ctx => ctx.reply(`–í—Å–µ –ø–∏–¥–æ—Ä—ã:\n${stringifyUserList(config.users)}`));

let params;

if (Boolean(config.webhook.domain)) {
  params = {
    webhook: config.webhook,
  };
}

app.launch(params).then(() => console.log('Telegram Bot started'));
